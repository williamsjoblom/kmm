#!/usr/bin/env python
PACKAGE = "kmm_position"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

position_group = gen.add_group("Positioning")
position_group.add("iterations", int_t, 0, "The number of times to do iterate least squares", 5, 1, 20)
position_group.add("position_proximity", double_t, 0, "The laser proximity to use for positioning", 6, 0, 6)
position_group.add("position_ignore", double_t, 0, "How much of the wall segment to ignore for positioning", 0.1, 0, 0.2)

mapping_group = gen.add_group("Mapping")
mapping_group.add("mapping_proximity", double_t, 0, "The laser proximity to use for mapping", 6, 0, 6)
mapping_group.add("mapping_ignore", double_t, 0, "How much of the wall segment to ignore for mapping", 0.1, 0, 0.2)

kalman_group = gen.add_group("Kalman")
kalman_group.add("use_predictions", bool_t, 0, "Use predictions for positioning",  True)
kalman_group.add("use_lidar", bool_t, 0, "Use lidar for positioning",  True)
kalman_group.add("use_accelerometer", bool_t, 0, "Use accelerometer for positioning",  False)
kalman_group.add("use_gyroscope", bool_t, 0, "Use gyroscope for positioning",  True)
kalman_group.add("predict_noise_linear", double_t, 0, "The noise in linear predictions [m/s]", 0.03, 0, 0.5)
kalman_group.add("predict_noise_angular", double_t, 0, "The noise in angular predictions [deg/s]", 1.0, 0, 100)
kalman_group.add("lidar_noise_linear", double_t, 0, "The noise in linear lidar messurement [m/s]", 0.15, 0, 0.5)
kalman_group.add("lidar_noise_angular", double_t, 0, "The noise in angular lidar messurement [deg/s]", 2.7, 0, 100)
kalman_group.add("gyro_noise", double_t, 0, "The noise of the gyro [deg/s]", 5, 0, 100)

exit(gen.generate(PACKAGE, "kmm_position", "Position"))
